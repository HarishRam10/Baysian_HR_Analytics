#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE)
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''))
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn,  header = TRUE, sep=','))
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn)  header = TRUE, sep=','))
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn),  header = TRUE, sep=','))
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn),  header = TRUE, sep=',')
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',')
View(data)
#-----------
sapply(data, function(x) sum(is.na(x)))
View(data)
View(data)
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
#-----------
sapply(data, function(x) sum(is.na(x)))
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
data2 = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',')
View(data2)
install.packages("rjags")
install.packages("runjags")
install.packages("rjags")
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
#-----------
#Check all columns for nan values
sapply(data, function(x) sum(is.na(x)))
#-----------
#Check all columns for nan values
sapply(data, function(x) sum(is.na(x)))
#Drop all nan
data2 = na.omit(data)
View(data2)
View(data)
#-------
data3 = data
data3[is.nan(data3)] =0
View(data3)
#-------
data3 = data
data3$company_size[is.nan(data3$company_size)] =0
is.nan(data3$company_size)
data3$company_size[is.nan(data3$company_size)]
View(data3)
type(data)
kind(data)
typeof(data)
#-------
data3 = data.frame(data)
data3$company_size[is.nan(data3$company_size)] = 0
data3 = data.frame(data)
View(data3)
data3$company_size
#-------
data3 = data.frame(data)
factor = data3$gender
#-------
data3 = data.frame(data)
factor = data3$gender
factor = replace(factor,is.na(factor),'Unknown')
is.na(factor)
#-------
data3 = data.frame(data)
factor = data3$gender
factor = replace(factor,is.na(factor),'Unknown')
#------------
fileIn = 'Train.csv'
#Read training data
#data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',')
#-------
data3 = data.frame(data)
factor = data3$gender
factor = replace(factor,is.na(factor),'Unknown')
#-------
data3 = data.frame(data)
factor = data3$gender
factor = replace(data3,is.na(data3),'Unknown')
View(factor)
View(data3)
View(factor)
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
#-------
data3 = data.frame(data)
factor = data3$gender
factor = replace(data3,is.na(data3),'Unknown')
factor = data3$gender
#------------
fileIn = 'Train.csv'
#Read training data
data = read.table(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
#-----------
#Check all columns for nan values
sapply(data, function(x) sum(is.na(x)))
#Drop all nan - Removes too many rows (more than half)
data2 = na.omit(data)
#-------
data3 = data.frame(data)
factor_fix = data3$gender
factor_fix = replace(data3,is.na(data3),'Unknown')
#-------
data3 = data.frame(data)
factor_fix = data3$gender
factor_fix = replace(data3$gender,is.na(data3$gender),'Unknown')
factor_fix
#-------
data3 = data.frame(data)
factor_fix = data3$gender
factor_fix = replace(data3,is.na(data3),'Unknown')
View(factor_fix)
#------------
fileIn = 'Train.csv'
#Read training data
data = read.csv(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"))
#-------
data3 = data.frame(data)
factor_fix = data3$gender
factor_fix = replace(data3,is.na(data3),'Unknown')
#------------
fileIn = 'Train.csv'
#Read training data
data = read.csv(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"), stringsAsFactors = FALSE)
View(data)
#-------
data3 = data.frame(data)
factor_fix = data3$gender
factor_fix = replace(data3,is.na(data3),'Unknown')
View(factor_fix)
#-------
data3 = data.frame(data)
factor_fix = data3$gender
factor_fix = replace(data3$gender,is.na(data3$gender),'Unknown')
View(data3)
#-------
data3 = data.frame(data)
data3 = replace(data3$gender,is.na(data3$gender),'Unknown')
#-------
data3 = data.frame(data)
data3$gender = replace(data3$gender,is.na(data3$gender),'Unknown')
View(data3)
fileIn = 'Train.csv'
#Read training data
data = read.csv(paste(getwd(),'/Data/',fileIn, sep=''), header = TRUE, sep=',', na.strings=c("","NA"), stringsAsFactors = FALSE)
#-----------
#Check all columns for nan values
sapply(data, function(x) sum(is.na(x)))
#Drop all nan - Removes too many rows (more than half)
data2 = na.omit(data)
#-------
data3 = data.frame(data)
data3 = replace(data3,is.na(data3),'Unknown')
data3$gender = replace(data3$gender,is.na(data3$gender),'Unknown')
#data3$gender = replace(data3$gender,is.na(data3$gender),'Unknown')
View(data3)
data3.columns
rownames(data3)
rcolnames(data3)
colnames(data3)
x=colnames(data3)
x
#-------
data3 = data.frame(data)
data3 = replace(data3,is.na(data3),'Unknown')
data3$gender = replace(data3$gender,is.na(data3$gender),'Who')
#data3$gender = replace(data3$gender,is.na(data3$gender),'Unknown')
View(data3)
View(data3)
data3 = data.frame(data)
View(data3)
#-------------------------------------------------------------------------------
# Set random seed
set.seed(42)
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Read the data
myData = read.csv("Testing_cleaned_impute.csv")
#-------------------------------------------------------------------------------
# Set random seed
set.seed(42)
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Read the data
myData = read.csv("Testing_cleaned_impute.csv")
# Read the data
myData = read.csv("Data/Testing_cleaned_impute.csv")
View(myData)
View(myData)
View(myData)
View(myData)
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
for ( parName in c( "thetaA","omegaA") ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
mcmcCoda = genMCMC( data=myData , numSavedSteps=11000 , saveName=fileNameRoot ,
thinSteps=20 )
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
# Optional: Specify filename root and graphical format for saving output.
# Otherwise specify as NULL or leave saveName and saveType arguments
# out of function calls.
fileNameRoot = "glucose_"
myData = read.csv("Data/Testing_cleaned_impute_OHE.csv")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda) # get all parameter names
myData$relevant_experience
myData$last_new_job
myData$relevent_experience
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
#-------------------------------------------------------------------------------
# Read the data
myData = read.csv("Data/Testing_cleaned_impute_OHE.csv")
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
source('~/GitHub/Baysian_HR_Analytics/Project_Driver.R')
